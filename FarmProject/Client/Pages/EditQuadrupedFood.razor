@page "/editquadrupedfood/{id:int}"

@using FarmProject.Client.Services.FoodServices
@inject IAnimalService AnimalsService
@inject NavigationManager NavigationManager
@inject IJSRuntime JS

@if (Id == null)
{
	<h1>Optiune neexistenta</h1>
}
else
{
	if (animal.Corn == null && animal.Hey == null)
	{
		<h4>Nevoile de hrana pentru @animal.Name nu sunt configurate. Le puteti adauga mai jos: </h4>
	}
	else
	{
		<h4>Nevoile curente de hrana pentru  @animal.Name sunt: porumb (kg/zi) - @animal.Corn si fan (kg/zi) - @animal.Hey. Le puteti modifica mai jos:  </h4>
	}


	<EditForm Model="animal" OnSubmit="HandleSubmit">
		
		<div class="form-group">
			<label for="quantity">Necesar porumb (kg/zi):</label>
			<InputNumber id="corn" @bind-Value="animal.Corn" class="form-control"></InputNumber>
		</div>
		<div class="form-group">
			<label for="quantity">Necesar fan (kg/zi):</label>
			<InputNumber id="hey" @bind-Value="animal.Hey" class="form-control"></InputNumber>
		</div>
		<button class="btn btn-primary" type="submit">Adauga</button>
	</EditForm>

	<div></div>


	<a class="nav-link" href="foodneeds">Reveniti la meniul anterior</a>

}


@code {
	[Parameter]
	public int? Id { get; set; }

	Quadruped animal = new Quadruped();


	protected override async Task OnParametersSetAsync()
	{
		if (Id != null)
			animal = await AnimalsService.GetSpecificQuadruped((int)Id);
		else
			Console.WriteLine("vad eu ce fac");

	}

	async Task HandleSubmit()
	{
		string message = "cantitatea de hrana necesara intr-o zi nu poate fi un numar negativ";
		if (animal.Hey < 0 || animal.Corn < 0)
		{
			await JS.InvokeVoidAsync("displayAlert1", message);
		}
		else
		{
			await AnimalsService.UpdateQuadruped(animal);
		}
		

	}

	

}
