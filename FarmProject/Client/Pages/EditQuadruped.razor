@page "/editquadruped"
@page "/editquadruped/{id:int}"


@using FarmProject.Client.Services.FoodServices
@inject IAnimalService AnimalsService;
@inject IFoodService FoodService;
@inject NavigationManager NavigationManager;
@inject IJSRuntime JS;

@if (Id == null)
{
	<h1>Optiune neexistenta</h1>
}
else
{
	
	<h3>Introudceti numarul de animale noi pentru categorie @animal.Name:</h3>
	<EditForm Model="animal" OnSubmit="HandleSubmit">
		<DataAnnotationsValidator />
		<ValidationSummary />
		
		<div class="form-group">
			<label for="quantity">Cantitate</label>
			<InputNumber id="quantity" @bind-Value="animal.Quantity"  class="form-control"></InputNumber>
		</div>
		<button class="btn btn-primary" type="submit">Adauga</button>
	</EditForm>

	<a class="nav-link" href="addquadrupeds">Reveniti la meniul anterior</a>

}



@code {
	[Parameter]
	public int? Id { get; set; }

	Quadruped animal = new Quadruped();
	double? qcornNeeds;
	double? qheyNeeds;
	double? fcornNeeds;
	Barn corn = new Barn();
	Barn hey = new Barn();
	double? cornStock;
	double? heyStock;
	int idCorn = 1;
	int idHey = 2;



	protected override async Task OnParametersSetAsync()
	{
		if (Id != null)
			animal = await AnimalsService.GetSpecificQuadruped((int)Id);
		else
			Console.WriteLine("Id invalid.");
		qcornNeeds = await AnimalsService.QuadrupedsCornNeeds();
		fcornNeeds = await AnimalsService.FowlsCornNeeds();
		corn = await FoodService.GetSpecificFood((int)idCorn);
		cornStock = corn.Quantity;
		qheyNeeds = await AnimalsService.QuadrupedsHeyNeeds();
		hey = await FoodService.GetSpecificFood((int)idHey);
		heyStock = hey.Quantity;

	}

	async Task HandleSubmit()
	{
		double? cornRest = cornStock - (qcornNeeds+fcornNeeds);
		double? heyRest = heyStock - qheyNeeds;
		cornRest = cornRest > 0 ? cornRest : 0;
		heyRest = heyRest > 0 ? heyRest : 0;
		bool cornCondition = (animal.Corn > 0) & ((animal.Quantity * animal.Corn * 7) <= cornRest);
		bool heyCondition = (animal.Hey > 0) & ((animal.Quantity * animal.Hey * 7) <= heyRest);

		
		string message = $"Nu ajunge hrana pentru a hrani {animal.Quantity} {animal.Name} timp de o saptamana. Adaugati hrana in stoc înainte de a adauga animale noi.";


		if (animal.Corn > 0 & animal.Hey == 0)
		{
			if ((animal.Quantity * animal.Corn * 7) <= cornRest)
			{
				await AnimalsService.UpdateQuadruped(animal);
				NavigationManager.NavigateTo("manageanimals");
			}
			else

			{
				await JS.InvokeVoidAsync("displayAlert1", message);
			}

		}
		else if (animal.Corn == 0 & animal.Hey > 0)

		{
			if ((animal.Quantity * animal.Hey * 7) <= heyRest)
			{
				await AnimalsService.UpdateQuadruped(animal);
				NavigationManager.NavigateTo("addquadrupeds");
			}
			else
			{
				await JS.InvokeVoidAsync("displayAlert1", message);
			}
			
		}
		
		

		
	}
}